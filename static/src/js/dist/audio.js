/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/fft.js/lib/fft.js":
/*!****************************************!*\
  !*** ./node_modules/fft.js/lib/fft.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n\n//# sourceURL=webpack://music/./node_modules/fft.js/lib/fft.js?");

/***/ }),

/***/ "./node_modules/note-frequency-map/Comparison.js":
/*!*******************************************************!*\
  !*** ./node_modules/note-frequency-map/Comparison.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const frequency = __webpack_require__(/*! ./util/frequency */ \"./node_modules/note-frequency-map/util/frequency.js\");\r\nconst scale = __webpack_require__(/*! ./util/scale */ \"./node_modules/note-frequency-map/util/scale.json\");\r\n\r\nclass Comparison {\r\n\r\n    constructor (note1, note2) {\r\n        this.note1 = note1;\r\n        this.note2 = note2;\r\n\r\n        this.semitones = getSemitones(getAllSemitones(note1, note2));\r\n        this.octaves = getOctaves(getAllSemitones(note1, note2));\r\n\r\n        let semitoneSum = `${this.semitones} semitone${(this.semitones === 1) ? '' : 's'}`;\r\n        let octaveSum = `${this.octaves} octave${(this.octaves === 1) ? '' : 's'}`;\r\n\r\n        if (getAllSemitones(note1, note2) === 0)\r\n        this.summary = `There is no difference between the notes, they are both ${note1.name + note1.octave}`;\r\n        else this.summary = `The note ${this.note1.name + this.note1.octave} is ${(this.octaves === 0) ? '' : octaveSum}${(this.semitones === 0 || this.octaves === 0) ? '' : ' and '}${(this.semitones === 0) ? '' : semitoneSum} away from ${note2.name + note2.octave}`;\r\n    }\r\n}\r\n\r\nfunction getAllSemitones (note1, note2) {\r\n    return frequency.getSemitonesFromNote(note1.name, note1.octave, note2.name, note2.octave);\r\n}\r\n\r\nfunction getSemitones (allSemitones) {\r\n    let result = allSemitones % scale.length;\r\n    if (result === 0) result = 0; // Else, it results in -0, which is ridiculous\r\n    return result;\r\n}\r\n\r\nfunction getOctaves (allSemitones) {\r\n    let result;\r\n    if (allSemitones < 0) {\r\n        result = Math.floor((allSemitones * -1) / scale.length) * -1;\r\n        if (result === 0) result = 0; // Else, it results in -0, which is ridiculous\r\n    }\r\n    else result = Math.floor(allSemitones / scale.length);\r\n    return result;\r\n}\r\n\r\nmodule.exports = Comparison;\n\n//# sourceURL=webpack://music/./node_modules/note-frequency-map/Comparison.js?");

/***/ }),

/***/ "./node_modules/note-frequency-map/Error.js":
/*!**************************************************!*\
  !*** ./node_modules/note-frequency-map/Error.js ***!
  \**************************************************/
/***/ ((module) => {

eval("let codes = [\r\n    {\r\n        code: 'ERR_SYNTAX_NOTE',\r\n        err:'That note does not exist'\r\n    },\r\n    {\r\n        code: 'ERR_SYNTAX_TOO_MANY_CHARS',\r\n        err: 'Too many characters'\r\n    },\r\n    {\r\n        code: 'ERR_SYNTAX_PITCHED',\r\n        err: 'Invalid pitch modifier'\r\n    },\r\n    {\r\n        code: 'ERR_SYNTAX_OCTAVE',\r\n        err: 'The octave was not set properly'\r\n    },\r\n    {\r\n        code: 'ERR_SYNTAX_TOO_FEW_CHARS',\r\n        err: 'Too few characters'\r\n    },\r\n    {\r\n        code: 'ERR_NOTE_TOO_HIGH',\r\n        err: 'The note is too high'\r\n    },\r\n    {\r\n        code: 'ERR_NOTE_TOO_LOW',\r\n        err: 'The note is too low'\r\n    },\r\n    {\r\n        code: 'ERR_FREQUENCY_OUT_OF_RANGE',\r\n        err: 'The frequency is either too low or too high'\r\n    }\r\n]\r\n\r\nclass Error {\r\n    constructor (id, extra, input) {\r\n        this.id = id;\r\n        this.extra = extra;\r\n        this.input = input;\r\n        this.code = codes[id].code;\r\n        this.err = codes[id].err;\r\n    }\r\n}\r\n\r\nmodule.exports = Error;\n\n//# sourceURL=webpack://music/./node_modules/note-frequency-map/Error.js?");

/***/ }),

/***/ "./node_modules/note-frequency-map/Note.js":
/*!*************************************************!*\
  !*** ./node_modules/note-frequency-map/Note.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const frequency = __webpack_require__(/*! ./util/frequency */ \"./node_modules/note-frequency-map/util/frequency.js\");\r\nconst Comparison = __webpack_require__(/*! ./Comparison */ \"./node_modules/note-frequency-map/Comparison.js\");\r\nconst Error = __webpack_require__(/*! ./Error */ \"./node_modules/note-frequency-map/Error.js\");\r\n\r\nclass Note {\r\n    constructor (name, octave, freq, rootNote) {\r\n        this.name = name;\r\n        this.octave = octave;\r\n        this.note;\r\n        this.tuning = {\r\n            name: rootNote.name,\r\n            octave: rootNote.octave,\r\n            frequency: rootNote.frequency\r\n        };\r\n\r\n        if (freq === null) {\r\n            this.frequency = frequency.fromNote(this, this.tuning);\r\n            this.centsOff = 0;\r\n        } else {\r\n            this.frequency = freq;\r\n            let checkedName = name || null;\r\n            let checkedOctave = octave || null;\r\n            let closest = frequency.getCentsOffFromNote(checkedName, checkedOctave, freq, rootNote);\r\n            if (closest !== false) {\r\n                this.centsOff = closest.cents;\r\n                this.name = closest.note.name;\r\n                this.octave = closest.note.octave;\r\n            } else this.err = new Error(7, `The frequency \"${freq}\" is out of range`, freq);\r\n        }\r\n\r\n        if (this.name !== null && this.octave !== null) {\r\n            this.note = this.name + this.octave;\r\n        }\r\n    }\r\n\r\n    transpose (semitones) {\r\n        frequency.transpose(this, semitones);\r\n    }\r\n\r\n    compare (note) {\r\n        return new Comparison(this, note);\r\n    }\r\n}\r\n\r\nmodule.exports = Note;\n\n//# sourceURL=webpack://music/./node_modules/note-frequency-map/Note.js?");

/***/ }),

/***/ "./node_modules/note-frequency-map/app.js":
/*!************************************************!*\
  !*** ./node_modules/note-frequency-map/app.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const parser = __webpack_require__(/*! ./util/parser */ \"./node_modules/note-frequency-map/util/parser.js\");\r\nconst Note = __webpack_require__(/*! ./Note */ \"./node_modules/note-frequency-map/Note.js\");\r\n\r\nlet rootNote = {\r\n    name: 'A',\r\n    octave: 4,\r\n    frequency: 440\r\n}\r\n\r\nfunction setRoot (note, freq) {\r\n    let parsed = parser.parseString(note);\r\n    if (parsed.err !== undefined) return false;\r\n    if (isNaN(freq) || freq <= 0) return false;\r\n    rootNote.name = parsed.name;\r\n    rootNote.octave = parsed.octave;\r\n    rootNote.frequency = freq;\r\n    return true;\r\n}\r\n\r\nfunction noteFromName (note) {\r\n    let parsed = parser.parseString(note);\r\n    return new Note(parsed.name, parsed.octave, null, rootNote);\r\n}\r\n\r\nfunction noteFromFreq (freq) {\r\n    return new Note(null, null, freq, rootNote);\r\n}\r\n\r\nmodule.exports = {\r\n    setRoot: (string, freq) => setRoot(string, freq),\r\n    noteFromName: string => noteFromName(string),\r\n    noteFromFreq: float => noteFromFreq(float)\r\n}\r\n\n\n//# sourceURL=webpack://music/./node_modules/note-frequency-map/app.js?");

/***/ }),

/***/ "./node_modules/note-frequency-map/util/frequency.js":
/*!***********************************************************!*\
  !*** ./node_modules/note-frequency-map/util/frequency.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const scale = __webpack_require__(/*! ./scale */ \"./node_modules/note-frequency-map/util/scale.json\");\r\n\r\nfunction fromNote (note) { // Note object\r\n    return calculate(note.name, note.octave, note.tuning);\r\n}\r\n\r\n// This function finds how much off the note is from either a defined one, or the closest one\r\nfunction getCentsOffFromNote (name, octave, freq, rootNote) {\r\n    let closestNoteName = name;\r\n    let closestNoteOctave = octave\r\n    // If no note is choosen, find the closest note\r\n    if (closestNoteName === null || closestNoteOctave === null) {\r\n\r\n        // First find the octave\r\n        for (let i = -3; i < 40; i++) {\r\n            let minFreq = calculate(scale[0], i, rootNote) / getHalfStepSize();\r\n            let maxFreq = calculate(scale[scale.length - 1], i, rootNote) * getHalfStepSize();\r\n\r\n            // Octave is not found, continue to next octave\r\n            if (!(freq >= minFreq && freq <= maxFreq)) continue;\r\n\r\n            // Octave was found, try to find the note.\r\n            closestNoteOctave = i;\r\n\r\n            // Find the closest note\r\n            for (let i = 0; i < scale.length; i++) {\r\n                let currentNoteFreq = calculate(scale[i], closestNoteOctave, rootNote);\r\n                let centsDiff = centsDifference(currentNoteFreq, freq);\r\n                if (centsDiff <= 50 && centsDiff > -50) {\r\n                    closestNoteName = scale[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (closestNoteName === null) continue;\r\n        }\r\n        \r\n        // If the octave wasn't found\r\n        if (closestNoteOctave === null) return false;\r\n        // If the note wasn't found\r\n        if (closestNoteName === null) return false;\r\n\r\n    }\r\n    return {\r\n        note: {\r\n            name: closestNoteName,\r\n            octave: closestNoteOctave\r\n        },\r\n        cents: centsDifference(calculate(closestNoteName, closestNoteOctave, rootNote), freq)\r\n    }\r\n}\r\n\r\nfunction centsDifference (f1, f2) {\r\n\treturn 1200*(Math.log(f2/f1)/Math.log(2))\r\n}\r\n\r\nfunction transpose (note, octave, semitones) {\r\n    let index = scale.indexOf(note.name) + semitones;\r\n    let newOctave = note.octave;\r\n\r\n    while (index < 0) {\r\n        index += scale.length;\r\n        newOctave--;\r\n    }\r\n\r\n    while (index > scale.length - 1) {\r\n        index -= scale.length;\r\n        newOctave++;\r\n    }\r\n\r\n    if (newOctave < 0) {\r\n        return new Error(7, `This result in octave being \"${octave}\"`, string);\r\n    }\r\n\r\n    note.octave = newOctave;\r\n    note.name = scale[index];\r\n}\r\n\r\nfunction getSemitonesFromNote (name1, octave1, name2, octave2) {\r\n    let semitones = scale.indexOf(name1) - scale.indexOf(name2);\r\n    let octaves = octave1 - octave2;\r\n    return semitones + (octaves * scale.length);\r\n}\r\n\r\nfunction getSemitonesFromRoot (name, octave, rootNote) {\r\n    return getSemitonesFromNote(name, octave, rootNote.name, rootNote.octave);\r\n}\r\n\r\nfunction getFullStepSize () {\r\n    return getStepSize(scale.length);\r\n}\r\n\r\nfunction getHalfStepSize () {\r\n    return getStepSize(scale.length * 2);\r\n}\r\n\r\nfunction getStepSize (count) {\r\n    return Math.pow(2, 1/count);\r\n}\r\n\r\nfunction calculate (name, octave, rootNote) {\r\n    return rootNote.frequency * Math.pow(getFullStepSize(), getSemitonesFromRoot(name, octave, rootNote));\r\n}\r\n\r\nmodule.exports.fromNote = fromNote;\r\nmodule.exports.transpose = transpose;\r\nmodule.exports.getSemitonesFromNote = getSemitonesFromNote;\r\nmodule.exports.getCentsOffFromNote = getCentsOffFromNote;\n\n//# sourceURL=webpack://music/./node_modules/note-frequency-map/util/frequency.js?");

/***/ }),

/***/ "./node_modules/note-frequency-map/util/parser.js":
/*!********************************************************!*\
  !*** ./node_modules/note-frequency-map/util/parser.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const scale = __webpack_require__(/*! ./scale */ \"./node_modules/note-frequency-map/util/scale.json\");\r\nconst symbols = __webpack_require__(/*! ./symbols */ \"./node_modules/note-frequency-map/util/symbols.json\");\r\nconst Error = __webpack_require__(/*! ../Error */ \"./node_modules/note-frequency-map/Error.js\");\r\n\r\nfunction parseString (string) {\r\n    let input = string.split('');\r\n    let inputNoPitching = null;\r\n    let name = null;\r\n    let pitched = null;\r\n    let octave = null;\r\n\r\n    // Too few characters\r\n    if (input.length < 2) {\r\n        return new Error(4, ``, string);\r\n    }\r\n\r\n    // Too many characters\r\n    if (input.length > 3) {\r\n        return new Error(1, `The characters \"${string.substring(3).split('').join(',')}\" is exceeding the max number of characters allowed`, string);\r\n    }\r\n\r\n    // If string includes flat or sharp\r\n    if (input.length === 3) {\r\n        // If sharp or flat symbol is invalid\r\n        if (!(symbols.sharp.includes(input[1]) || symbols.flat.includes(input[1]))) {\r\n            return new Error(2, `The character \"${input[2]}\" is invalid`, string)\r\n        }\r\n        // Pitch modifier is valid\r\n        pitched = input[1];\r\n        inputNoPitching = Array.from(input[0] + input[2]);\r\n    }\r\n    else {\r\n        inputNoPitching = input;\r\n        pitched = null;\r\n    }\r\n\r\n    // If note name is not valid\r\n    if (!scale.join('').toLowerCase().split('').includes(input[0].toLowerCase())) {\r\n        return new Error(0, `The characer \"${input[0]}\" is invalid`, string);\r\n    }\r\n    \r\n    // If note name is valid\r\n    name = input[0].toUpperCase();\r\n    \r\n    // If octave is not a number\r\n    if (isNaN(inputNoPitching[1])) {\r\n        return new Error(3, `The character \"${inputNoPitching[1]}\" is not a number`, string);\r\n    }\r\n\r\n    // If the octave is valid\r\n    octave = Number(inputNoPitching[1]);\r\n\r\n    // If it's pitched, change the name of the note\r\n    if (pitched !== null) {\r\n        let index = null;\r\n        if (symbols.sharp.includes(pitched)) index = scale.indexOf(name) + 1;\r\n        else index = scale.indexOf(name) - 1;\r\n\r\n        if (index < 0) {\r\n            index = scale.length - 1;\r\n            octave--;\r\n        }\r\n\r\n        if (index > scale.length - 1) {\r\n            index = 0;\r\n            octave++;\r\n        }\r\n\r\n        if (octave < 0) {\r\n            return new Error(7, `This result in octave being \"${octave}\"`, string);\r\n        }\r\n\r\n        name = scale[index];\r\n    }\r\n\r\n    return {name, octave};\r\n}\r\n\r\nmodule.exports.parseString = parseString;\n\n//# sourceURL=webpack://music/./node_modules/note-frequency-map/util/parser.js?");

/***/ }),

/***/ "./src/js/audio.js":
/*!*************************!*\
  !*** ./src/js/audio.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"analyser\": () => (/* binding */ analyser),\n/* harmony export */   \"audioContext\": () => (/* binding */ audioContext),\n/* harmony export */   \"bufferLength\": () => (/* binding */ bufferLength),\n/* harmony export */   \"dataArray\": () => (/* binding */ dataArray),\n/* harmony export */   \"energy\": () => (/* binding */ energy),\n/* harmony export */   \"pitchDetector\": () => (/* binding */ pitchDetector),\n/* harmony export */   \"src\": () => (/* binding */ src)\n/* harmony export */ });\n/* harmony import */ var pitchy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pitchy */ \"./node_modules/pitchy/index.js\");\n/* harmony import */ var note_frequency_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! note-frequency-map */ \"./node_modules/note-frequency-map/app.js\");\n/* harmony import */ var note_frequency_map__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(note_frequency_map__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\nlet audioContext, analyser, microphone, javascriptNode\nlet dataArray, bufferLength, energy, src\n\n// source = audioContext.createMediaStreamSource(stream);\n// scriptProcessor = audioContext.createScriptProcessor(4096, 1, 1);\n\n// scriptProcessor.onaudioprocess = (event) => {\n// const buffer = event.inputBuffer.getChannelData(0);\n// // ~_~\n// // };\n\n//   source.connect(scriptProcessor);\n//   scriptProcessor.connect(audioContext.destination);\n\nnavigator.getUserMedia = navigator.getUserMedia ||\n  navigator.webkitGetUserMedia ||\n  navigator.mozGetUserMedia;\nif (navigator.getUserMedia) {\n  navigator.getUserMedia({\n      audio: true\n    },\n    function(stream) {\n      audioContext = new AudioContext();\n      analyser = audioContext.createAnalyser();\n      microphone = audioContext.createMediaStreamSource(stream);\n\n      javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n\n      analyser.smoothingTimeConstant = 0.8;\n      analyser.fftSize = 1024;\n\n      microphone.connect(analyser);\n      analyser.connect(javascriptNode);\n      javascriptNode.connect(audioContext.destination);\n\n      console.log(microphone)\n\n    //   canvasContext = $(\"#canvas\")[0].getContext(\"2d\");\n\n      javascriptNode.onaudioprocess = function() {\n          var array = new Uint8Array(analyser.frequencyBinCount);\n          analyser.getByteFrequencyData(array);\n          var values = 0;\n          bufferLength = analyser.frequencyBinCount;\n          dataArray = new Uint8Array(bufferLength);\n\n\n          var length = array.length;\n          for (var i = 0; i < length; i++) {\n            values += (array[i]);\n          }\n\n          var average = values / length;\n          energy = average * 0.09\n\n\n        //   energy = 0;\n\n\n        // const meyda_analyser = Meyda.createMeydaAnalyzer({\n\n        //     audioContext: audioContext,\n        //     source: microphone,\n        //     buffersize: 512,\n        //     featureExtractors: [\"energy\"],\n        //     callback: (features) => {\n        //         energy = features['energy']\n        //         console.log('energy', energy)\n        //     }\n        // })\n        // meyda_analyser.start();\n\n        } // end fn stream\n    },\n    function(err) {\n      console.log(\"The following error occured: \" + err.name)\n    });\n\n} else {\n  console.log(\"getUserMedia not supported\");\n}\n\n\n\nfunction updatePitch(analyser, detector, input, sampleRate) {\n    analyser.getFloatTimeDomainData(input);\n    let [pitch, clarity] = detector.findPitch(input, sampleRate);\n    let myNote = note_frequency_map__WEBPACK_IMPORTED_MODULE_1___default().noteFromFreq(pitch);\n    console.log('노트', myNote.note);\n}\n\n\n\nfunction pitchDetector(){\n    const detector = pitchy__WEBPACK_IMPORTED_MODULE_0__.PitchDetector.forFloat32Array(analyser.fftSize);\n    const input = new Float32Array(detector.inputLength);\n    updatePitch(analyser, detector, input, audioContext.sampleRate);\n}\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://music/./src/js/audio.js?");

/***/ }),

/***/ "./node_modules/pitchy/index.js":
/*!**************************************!*\
  !*** ./node_modules/pitchy/index.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Autocorrelator\": () => (/* binding */ Autocorrelator),\n/* harmony export */   \"PitchDetector\": () => (/* binding */ PitchDetector)\n/* harmony export */ });\n/* harmony import */ var fft_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fft.js */ \"./node_modules/fft.js/lib/fft.js\");\n\n\n/**\n * @typedef {Float32Array | Float64Array | number[]} Buffer One of the supported\n * buffer types. Other numeric array types may not work correctly.\n */\n\n/**\n * A class that can perform autocorrelation on input arrays of a given size.\n *\n * The class holds internal buffers so that no additional allocations are\n * necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use. While inputs to the\n * autocorrelation process can be any array-like type, the output buffer\n * (whether provided explicitly or using a fresh buffer) is always of this type.\n */\nclass Autocorrelator {\n  /** @private @readonly @type {number} */\n  _inputLength;\n  /** @private @type {FFT} */\n  _fft;\n  /** @private @type {(size: number) => T} */\n  _bufferSupplier;\n  /** @private @type {T} */\n  _paddedInputBuffer;\n  /** @private @type {T} */\n  _transformBuffer;\n  /** @private @type {T} */\n  _inverseBuffer;\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float32Array(length)\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float64Array(length)\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using `number[]`\n   * buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new Autocorrelator(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link Autocorrelator} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `Autocorrelator` will only support operation on arrays of this length.\n   * @param bufferSupplier {(length: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    if (inputLength < 1) {\n      throw new Error(`Input length must be at least one`);\n    }\n    this._inputLength = inputLength;\n    // We need to double the input length to get correct results, and the FFT\n    // algorithm we use requires a length that's a power of 2\n    this._fft = new fft_js__WEBPACK_IMPORTED_MODULE_0__(ceilPow2(2 * inputLength));\n    this._bufferSupplier = bufferSupplier;\n    this._paddedInputBuffer = this._bufferSupplier(this._fft.size);\n    this._transformBuffer = this._bufferSupplier(2 * this._fft.size);\n    this._inverseBuffer = this._bufferSupplier(2 * this._fft.size);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._inputLength;\n  }\n\n  /**\n   * Autocorrelates the given input data.\n   *\n   * @param input {ArrayLike<number>} the input data to autocorrelate\n   * @param output {T} the output buffer into which to write the autocorrelated\n   * data. If not provided, a new buffer will be created.\n   * @returns {T} `output`\n   */\n  autocorrelate(input, output = this._bufferSupplier(input.length)) {\n    if (input.length !== this._inputLength) {\n      throw new Error(\n        `Input must have length ${this._inputLength} but had length ${input.length}`\n      );\n    }\n    // Step 0: pad the input array with zeros\n    for (let i = 0; i < input.length; i++) {\n      this._paddedInputBuffer[i] = input[i];\n    }\n    for (let i = input.length; i < this._paddedInputBuffer.length; i++) {\n      this._paddedInputBuffer[i] = 0;\n    }\n\n    // Step 1: get the DFT of the input array\n    this._fft.realTransform(this._transformBuffer, this._paddedInputBuffer);\n    // We need to fill in the right half of the array too\n    this._fft.completeSpectrum(this._transformBuffer);\n    // Step 2: multiply each entry by its conjugate\n    const tb = this._transformBuffer;\n    for (let i = 0; i < tb.length; i += 2) {\n      tb[i] = tb[i] * tb[i] + tb[i + 1] * tb[i + 1];\n      tb[i + 1] = 0;\n    }\n    // Step 3: perform the inverse transform\n    this._fft.inverseTransform(this._inverseBuffer, this._transformBuffer);\n\n    // This last result (the inverse transform) contains the autocorrelation\n    // data, which is completely real\n    for (let i = 0; i < input.length; i++) {\n      output[i] = this._inverseBuffer[2 * i];\n    }\n    return output;\n  }\n}\n\n/**\n * Returns an array of all the key maximum positions in the given input array.\n *\n * In McLeod's paper, a key maximum is the highest maximum between a positively\n * sloped zero crossing and a negatively sloped one.\n *\n * TODO: it may be more efficient not to construct a new output array each time,\n * but that would also make the code more complicated (more so than the changes\n * that were needed to remove the other allocations).\n *\n * @param input {ArrayLike<number>}\n * @returns {number[]}\n */\nfunction getKeyMaximumIndices(input) {\n  // The indices of the key maxima\n  /** @type {number[]} */ const keyIndices = [];\n  // Whether the last zero crossing found was positively sloped; equivalently,\n  // whether we're looking for a key maximum\n  let lookingForMaximum = false;\n  // The largest local maximum found so far\n  let max = -Infinity;\n  // The index of the largest local maximum so far\n  let maxIndex = -1;\n\n  for (let i = 1; i < input.length - 1; i++) {\n    if (input[i - 1] <= 0 && input[i] > 0) {\n      // Positively sloped zero crossing\n      lookingForMaximum = true;\n      maxIndex = i;\n      max = input[i];\n    } else if (input[i - 1] > 0 && input[i] <= 0) {\n      // Negatively sloped zero crossing\n      lookingForMaximum = false;\n      if (maxIndex !== -1) {\n        keyIndices.push(maxIndex);\n      }\n    } else if (lookingForMaximum && input[i] > max) {\n      max = input[i];\n      maxIndex = i;\n    }\n  }\n\n  return keyIndices;\n}\n\n/**\n * Refines the chosen key maximum index chosen from the given data by\n * interpolating a parabola using the key maximum index and its two neighbors\n * and finding the position of that parabola's maximum value.\n *\n * This is described in section 5 of the MPM paper as a way to refine the\n * position of the maximum.\n *\n * @param index {number} the chosen key maximum index. This must be between `1`\n * and `data.length - 2`, inclusive, since it and its two neighbors need to be\n * valid indexes of `data`.\n * @param data {ArrayLike<number>} the input array from which `index` was chosen\n * @returns {[number, number]} a pair consisting of the refined key maximum index and the\n * interpolated value of `data` at that index (the latter of which is used as a\n * measure of clarity)\n */\nfunction refineResultIndex(index, data) {\n  const [x0, x1, x2] = [index - 1, index, index + 1];\n  const [y0, y1, y2] = [data[x0], data[x1], data[x2]];\n\n  // The parabola going through the three data points can be written as\n  // y = y0(x - x1)(x - x2)/(x0 - x1)(x0 - x2)\n  //   + y1(x - x0)(x - x2)/(x1 - x0)(x1 - x2)\n  //   + y2(x - x0)(x - x1)/(x2 - x0)(x2 - x1)\n  // Given the definitions of x0, x1, and x2, we can simplify the denominators:\n  // y = y0(x - x1)(x - x2)/2\n  //   - y1(x - x0)(x - x2)\n  //   + y2(x - x0)(x - x1)/2\n  // We can expand this out and get the coefficients in standard form:\n  // a = y0/2 - y1 + y2/2\n  // b = -(y0/2)(x1 + x2) + y1(x0 + x2) - (y2/2)(x0 + x1)\n  // c = y0x1x2/2 - y1x0x2 + y2x0x1/2\n  // The index of the maximum is -b / 2a (by solving for x where the derivative\n  // is 0).\n\n  const a = y0 / 2 - y1 + y2 / 2;\n  const b = -(y0 / 2) * (x1 + x2) + y1 * (x0 + x2) - (y2 / 2) * (x0 + x1);\n  const c = (y0 * x1 * x2) / 2 - y1 * x0 * x2 + (y2 * x0 * x1) / 2;\n\n  const xMax = -b / (2 * a);\n  const yMax = a * xMax * xMax + b * xMax + c;\n  return [xMax, yMax];\n}\n\n/**\n * A class that can detect the pitch of a note from a time-domain input array.\n *\n * This class uses the McLeod pitch method (MPM) to detect pitches. MPM is\n * described in the paper 'A Smarter Way to Find Pitch' by Philip McLeod and\n * Geoff Wyvill\n * (http://miracle.otago.ac.nz/tartini/papers/A_Smarter_Way_to_Find_Pitch.pdf).\n *\n * The class holds internal buffers so that a minimal number of additional\n * allocations are necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use internally. Inputs to the\n * pitch-detection process can be any numeric array type.\n */\nclass PitchDetector {\n  /** @private @type {Autocorrelator<T>} */\n  _autocorrelator;\n  /** @private @type {T} */\n  _nsdfBuffer;\n  // TODO: it might be nice if this were configurable\n  /** @private @readonly */\n  _clarityThreshold = 0.9;\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float32Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float64Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using `number[]` buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new PitchDetector(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link PitchDetector} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `PitchDetector` will only support operation on arrays of this length.\n   * @param bufferSupplier {(inputLength: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    this._autocorrelator = new Autocorrelator(inputLength, bufferSupplier);\n    this._nsdfBuffer = bufferSupplier(inputLength);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._autocorrelator.inputLength;\n  }\n\n  /**\n   * Returns the pitch detected using McLeod Pitch Method (MPM) along with a\n   * measure of its clarity.\n   *\n   * The clarity is a value between 0 and 1 (potentially inclusive) that\n   * represents how \"clear\" the pitch was. A clarity value of 1 indicates that\n   * the pitch was very distinct, while lower clarity values indicate less\n   * definite pitches.\n   *\n   * @param input {ArrayLike<number>} the time-domain input data\n   * @param sampleRate {number} the sample rate at which the input data was\n   * collected\n   * @returns {[number, number]} the detected pitch, in Hz, followed by the clarity\n   */\n  findPitch(input, sampleRate) {\n    this._nsdf(input);\n    const keyMaximumIndices = getKeyMaximumIndices(this._nsdfBuffer);\n    if (keyMaximumIndices.length === 0) {\n      // No key maxima means that we either don't have enough data to analyze or\n      // that the data was flawed (such as an input array of zeroes)\n      return [0, 0];\n    }\n    // The highest key maximum\n    const nMax = Math.max(...keyMaximumIndices.map((i) => this._nsdfBuffer[i]));\n    // Following the paper, we return the pitch corresponding to the first key\n    // maximum higher than K * nMax. This is guaranteed not to be undefined, since\n    // we know of at least one key maximum satisfying this condition (whichever\n    // key maximum gave us nMax).\n    const resultIndex = keyMaximumIndices.find(\n      (i) => this._nsdfBuffer[i] >= this._clarityThreshold * nMax\n    );\n    const [refinedResultIndex, clarity] = refineResultIndex(\n      // @ts-expect-error resultIndex is guaranteed to be defined\n      resultIndex,\n      this._nsdfBuffer\n    );\n\n    // Due to floating point errors, the clarity may occasionally come out to be\n    // slightly over 1.0. We can avoid incorrect results by clamping the value.\n    return [sampleRate / refinedResultIndex, Math.min(clarity, 1.0)];\n  }\n\n  /**\n   * Computes the NSDF of the input and stores it in the internal buffer. This\n   * is equation (9) in the McLeod pitch method paper.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   */\n  _nsdf(input) {\n    // The function r'(tau) is the autocorrelation\n    this._autocorrelator.autocorrelate(input, this._nsdfBuffer);\n    // The function m'(tau) (defined in equation (6)) can be computed starting\n    // with m'(0), which is equal to 2r'(0), and then iteratively modified to\n    // get m'(1), m'(2), etc. For example, to get m'(1), we take m'(0) and\n    // subtract x_0^2 and x_{W-1}^2. Then, to get m'(2), we take m'(1) and\n    // subtract x_1^2 and x_{W-2}^2, and further values are similar (see the\n    // note at the end of section 6 in the MPM paper).\n    //\n    // The resulting array values are 2 * r'(tau) / m'(tau). We use m below as\n    // the incremental value of m'.\n    let m = 2 * this._nsdfBuffer[0];\n    /** @type {number} */ let i;\n    // As pointed out by issuefiler on GitHub, we can take advantage of the fact\n    // that m will never increase to avoid division by zero by ending this loop\n    // once m === 0. The rest of the array values after m becomes 0 will just be\n    // set to 0 themselves. We actually check for m > 0 rather than m === 0\n    // because there may be small floating-point errors that cause m to become\n    // negative rather than exactly 0.\n    for (i = 0; i < this._nsdfBuffer.length && m > 0; i++) {\n      this._nsdfBuffer[i] = (2 * this._nsdfBuffer[i]) / m;\n      m -= input[i] ** 2 + input[input.length - i - 1] ** 2;\n    }\n    // If there are any array values remaining, it means m === 0 for those\n    // values of tau, so we can just set them to 0\n    for (; i < this._nsdfBuffer.length; i++) {\n      this._nsdfBuffer[i] = 0;\n    }\n  }\n}\n\n/**\n * Rounds up the input to the next power of 2.\n *\n * @param {number} v\n * @returns {number} the next power of 2 at least as large as `v`\n */\nfunction ceilPow2(v) {\n  // https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n\n\n//# sourceURL=webpack://music/./node_modules/pitchy/index.js?");

/***/ }),

/***/ "./node_modules/note-frequency-map/util/scale.json":
/*!*********************************************************!*\
  !*** ./node_modules/note-frequency-map/util/scale.json ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('[\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"]');\n\n//# sourceURL=webpack://music/./node_modules/note-frequency-map/util/scale.json?");

/***/ }),

/***/ "./node_modules/note-frequency-map/util/symbols.json":
/*!***********************************************************!*\
  !*** ./node_modules/note-frequency-map/util/symbols.json ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"sharp\":[\"#\"],\"flat\":[\"b\",\"♭\"]}');\n\n//# sourceURL=webpack://music/./node_modules/note-frequency-map/util/symbols.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/audio.js");
/******/ 	
/******/ })()
;