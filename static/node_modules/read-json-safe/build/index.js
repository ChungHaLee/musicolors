"use strict";

exports.__esModule = true;
exports.readJSONFile = readJSONFile;
exports.readJSONFileSync = readJSONFileSync;

var _readFileSafe = require("read-file-safe");

var _parseJsonObject = _interopRequireWildcard(require("parse-json-object"));

exports.JSONObject = _parseJsonObject.JSONObject;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function readJSONFile(_x) {
  return _readJSONFile.apply(this, arguments);
}

function _readJSONFile() {
  _readJSONFile = _asyncToGenerator(function* (path) {
    return (0, _readFileSafe.readFile)(path).then(function (text) {
      return (0, _parseJsonObject["default"])(text);
    });
  });
  return _readJSONFile.apply(this, arguments);
}

function readJSONFileSync(path) {
  var text = (0, _readFileSafe.readFileSync)(path);
  return (0, _parseJsonObject["default"])(text);
}